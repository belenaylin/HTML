/*  Selector global */
* {
  box-sizing: content-box;
}
body,
html {
  padding: 0;
  margin: 0;
}
.myli { 
  /* Selec class*/
  background-color: rgb(66, 98, 22);
  color: rgb(0, 0, 0);
}

header { 
  /* select elemento*/
  color: rgb(193, 193, 233); background-color: rgb(40, 110, 8)"
}

.content-content-box > div {
  background-color: green;
  width: 300px;
  height: 10px;
  margin: 30px;
  border: 10px solid black;
}

#article-1 { 
  /*select id*/
  background-color: rgba(3, 108, 73, 0.514);
}

#myp {
  color: black;
}

.myp {
  font-size: 24px;
}

.back {
  background-color: brown;
}

.color-rojo-back-azul {
  color: white;
  background-color: rgb(13, 94, 13);
}

/* Modelo de caja */

.contenedor {
  margin: 50px;
  background-color: darkgreen;
  padding: 10px;
  border: 5px solid black;
  color: green;
}

.contenido {
  background-color: white;
}

.contenedor-con-imagen {
  width: 400px;
  height: 400px;
  padding: 20px;
  background-color: aliceblue;
  background-image: url(Public/cyberpunk.gif);
  background-size: cover;
  background-position: center;
  text-align: center;
  /* para insertar una imagen dentro del background */
}

.contenido-con-imagen {
  background-color: white;
}

/* Selectores */

/* selector por elemento */

span {
  font-weight: bold;
}

/* Asigan los mismos estílos a elementos con nombres diferentes, esta regla afecta a todos los elementos <p> y <span> */

p,
span {
  color: black;
}

/* Afecta solo a los elementos <p> que se encuentran dentro de la etiqueta <main>, ya sea contenido directo o indirecto */

main p {
  background-color: bisque;
}
/* Usa el caracter > para referenciar a un elememto que es hijo directo - contenedor- parrafo */

.contenedor-parrafo > p {
  font-size: 35px;
  color: black;
  background-color: white;
}

/* este selector hace referencia a elementos que estám precedidos por otros elementos: ambos deben estar al mismo nivel */

h1 + p {
  color: rebeccapurple;
}

/* Estilos más usados */
/* Declara el tipo de letra que se usa parqa mostrar en un texto. Se pueden declarar multiples valores separados por coma para ofrecer al navegador varias alternativas en vaso de que alguna no se encuentre disponible */

.container {
  border-top: 1px solid black;
  padding: 20px;
  font-family:Georgia, 'Times New Roman', Times, serif;
  color: white;
}

.container > .content > p {
  background-color: bisque;
  color: black;
  font-size: 25px; /* Determina el tamaño de la fuente; puede estar incluido en pixeles (px) puntos (pt), %, rem, em */
  font-weight: 100 /* bold (100 - 1000) */;
  font-style: oblique;
}

.content > h3 {
  background-color: bisque;
  font: bold 30px Arial, sans-serif;
  /* Permite declarar varios atributos al mismo tiempo separados por espacios. 1° grosor, 2°tamaño, 3°familia de fuentes */
  text-align: center; /* Left, right, center,justify */
  line-height: 60px; /* Define el espacio entre lineas */
}

/* Colores */

.mydiv {
  height: 100px;
  width: 100px;
  border: 1px solid black;
  padding: 20px;
  background-color: rgb(255, 380, 100);
  background-image: url(Public/cyberpunk.gif);
}

.div-in-mydiv {
  height: 50px;
  width: 50 px;
  border: 1px solid black;
  background-color: rgba(255, 255, 255, 0.9);
}

.div-in-mydiv-2 {
  height: 50px;
  width: 50 px;
  border: 1px solid black;
  background-color: rgba(255, 255, 255, 0.9);
}

.content {
  font-size: 30 px;
}

/* Tamaños */
.div-in-mydiv-3 {
  height: 50px;
  width: 50 px;
  margin: 20 px 0;
  border: 1px solid black;
  background-color: #00f0ff;/* 0 -9 y A F */
}

.tamano {
  margin: 100 px 20px;
  height: 200px;
  width: 200px;
  background-color: black;
}

.tamano-hijo {
  height: 25%;
  width: 25%;
  background-color: white;
}

.div-vh-vw {
  height: 100vh;
  width: calc(100vw - 40 px);
  background-color: darkblue;
}
.punto {
  height: 100pt;
  width: 100pt;
  background-color: red;
}
.div-rem {
  height: 20rem; /* relación al la fuente de todo el html (Documento) */
  width: 20rem;
  background-color: #00ff00;
}
.div-em {
  height: 20em; /* relación al la fuente del contenedor */
  width: 20em;
  background-color: blue;
}
._contenedor {
  background-color: red;
  width: 500px;
  height: 500px;
}
._contenido {
  background-color: green;
  width: 200px;
  height: 200px;
  max-height: 200px; /* El maximo de alto  */
  max-width: 200px; /* El maximio de ancho */
  overflow-x: auto; /* scroll, hidden, auto */
  overflow-y: hidden;
}
._otrocontenido {
  background-color: blue;
  width: 150px;
  height: 150px;
}
.contenido-grande {
  height: 400px;
  width: 400px;
  background-color: chocolate;
}
.contenedor-de-bordes > div {
  height: 100px;
  width: 100px;
  border-width: 5px;
  border-style: dotted;
  border-color: #00ff00;
  border-radius: 50%;
  margin-top: 20px;
}
.borde-1 {
  border-style: dashed !important;
}
.borde-2 {
  border-style: double !important;
}
.borde-3 {
  border-style: outset !important;
}
.borde-4 {
  border-style: solid !important;
}
.borde-en-una-linea {
  border: 1px solid red; /* 1° tamaño de linea (border-with), 2° Estilo de borde, 3° color */
  border-radius: 50px;
  height: 100px;
  width: 100px;
  margin-top: 20px;
}
/* 
Flex container
afectara no solo a si mismo, tambien afectara a lo que contiene
Es un sistema de elementos flexibles. Donde los elementosHTML se adaptan y colocan automaticamanete siendo mas facil personalizarlos
 */
/* 
 1 - flex-direction : define en que dirección se distribuiran los elementos dentro del contenedor
 - column
 - column-reverse
 - row
 - row-reverse
 2- flex-wrap: define si que los elementos dentro del contenedor puedan saltar a la siguiente fila o columna
 - wrap
 - nowrap
 3- fex-flow : Es una combinacion de las propiedades flex-directio y flex-wrap
 4- justify-conetnt : para alinear el contenido
 - star
 - center
 - end
 - flex-start
 - flex-center
 - flex-end
 5- align-items : se usa para alinear en vertical los elementos dentro del contenedor
 - center
 - start
 - end
 - stretch
 - baseline
 6 - Align-content para alinear las filas::after
 - space-between
 - space-arround
 - strech
 - center
 - flex-start
 - flex-end
  */
.flex-container {
  display: flex;
  /* flex-direction: row; */ /* column, roww, reverse, column-reverse, row-reverse */
  flex-wrap: wrap; /* nowrap,wrap, wrap-reverse */
  /*  flex-flow: row wrap; */ /* Es una combinacion de las propiedades flex-directio y flex-wrap */
  /* justify-content: end; */
  /*  align-items: end; */
  align-content: space-around;
  font-size: 30px;
  border: 1px solid black;
  padding: 10px;
  height: 300px;
}
/* Flex Item */
.flex-container > div {
  background-color: #007fff;
  padding: 20px;
  width: 100px;
  text-align: center;
  line-height: 70px;
  height: 70px;
}
.contenedor-perfecto {
  display: flex;
  background-color: #ddd;
  height: 40vh;
  width: 40vw;
  justify-content: center;
  align-items: center;
}
.contenido-perfecto {
  display: flex;
  background-color: #00ff00;
  height: 100px;
  width: 100px;
  align-items: center;
  justify-content: center;
}

/* Selector hijo */
/* 
Comportamiento de elementos hijos dentro de contenedores flex:
1- order: Especifica el orden del los elementos
2- flex-grow: Determina cuanto crece el elemento relativo al resto de elementos que estan dentro del contenedor flex
 */
.flex-container-2 {
  display: flex;
  flex-wrap: wrap;
  align-content: space-around;
  font-size: 30px;
  border: 1px solid black;
  padding: 10px;
  align-items: stretch;
}
.flex-container-2 > div {
  /* margin: 10px; */
  background-color: #007fff;
  padding: 20px;
  width: 100px;
  text-align: center;
  line-height: 70px;
  height: 70px;
}
.flex-container-2 > div:nth-child(1) {
  order: 3; /* para cambiar el orden */
  flex-grow: 1;
  background-color: red;
}
.flex-container-2 > div:nth-child(2) {
  order: 1;
  flex-grow: 5;
  background-color: blue;
}

.flex-container-2 > div:nth-child(3) {
  order: 2;
  flex-grow: 5;
  background-color: blueviolet;
}

/* Flex - shrink */

/* 
Determina cuanto se puede encoger un elemento en relación a los demas dentro de un contenedor flex */

.flex-container-3 {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 30px;
  border: 1px solid black;
  padding: 10px;
}
.flex-container-3 > div {
  margin: 10px;
  background-color: #9233a9;
  color: #fff;
  padding: 20px;
  width: 100px;
  text-align: center;
  line-height: 70px;
}

.flex-container-3 > div:nth-child(2) {
  flex-shrink: 0;
}

/* 
flex-basis: 
Determina una longitud especifica
 */

.flex-container-3 > div:nth-child(3) {
  flex-basis: 200px;
}

/* Display grid: nos permitirá disponer elementos en 2 ejes distintos a diferencia de flex que nos ayuda a disponer elementos solo en 1 dimensión*/

.container-grid {
  display: grid;
}

.item {
  background-color: rgb(190, 176, 141);
  color: #391912;
  padding: 20px;
  font-size: 20px;
  border: solid black;
}
.grid-columns {
  grid-template-columns: 1fr 50% 1fr;
  /* o bien puedo usarlo con la sintaxis: repeat(3, 1fr); el 3 es la cantidad de hijos que quiero abarcar y fr es la unidad de medida que se le va a aplicar a esos hijos(fr,%, px) */
}
.grid-rows-column {
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: repeat(3, 1fr);
} /* esto quiere decir que tenemos una grilla que ordena los elementos de esta forma: 4x3, es decir, desplaza los elementos en un orden de 4 columnas y 3 filas */

.primero {
  grid-column-start: 1; /* desde donde comienza */
  grid-column-end: 3;
  /* aquí le estamos diciendo al elemento 1 que comience en la columna 1 y termine en la columna 3, y que abarque todo ese espacio */
  grid-row-start: 1;
  grid-row-end: 3;
}

.estructura {
  display: grid;
  height: 100vh;
  width: 100vw;
  grid-template-areas:
    "_header _header"
    "_sidebar _main"
    "_footer _footer";
  grid-template-rows: 50px 1fr 80px;
  grid-template-columns: 300px 1fr;
}

._header {
  color: white;
  grid-area: _header;
  background-color: #0b5e63;
}
._sidebar {
  grid-area: _sidebar;
  background-color: #357c71;
}
._main {
  grid-area: _main;
  background-color: #c1c7c9;
}
._footer {
  color: white;
  grid-area: _footer;
  background-color: #234d27;
}

.responsivo {
  display: grid;
  grid-template-columns: repeat(3, minmax(100px, 200px));
  grid-template-rows: repeat(1, minmax (100px, 200px));
  border: 1px solid darkcyan;
  padding: 15px;
  gap: 15px;
}

.responsivo > div {
  background-color: #0b5e63;
  color: white;
  padding: 30px;
}